package com.orienteering.handrail.interactors

import com.orienteering.handrail.httprequests.CustomCallback
import com.orienteering.handrail.httprequests.IOnFinishedListener
import com.orienteering.handrail.httprequests.StatusResponseEntity
import com.orienteering.handrail.models.Event
import com.orienteering.handrail.models.Participant
import com.orienteering.handrail.services.ParticipantService
import com.orienteering.handrail.services.ServiceFactory
import retrofit2.Call

/**
 * Model/Control request participantService and handle response
 *
 */
class ParticipantInteractor {

    /**
     * Participant service generated by service factory for http calls
     */
    var participantService: ParticipantService

    /**
     * Initialise participant service
     */
    init {
        participantService = ServiceFactory.makeService(ParticipantService::class.java)
    }

    /**
     * get participants of single event via participantService
     *
     * @param eventId
     * @param onFinishedListener
     */
    fun getParticipants(eventId : Int, onFinishedListener: IOnFinishedListener<List<Participant>>){
        val call : Call<StatusResponseEntity<List<Participant>>> = participantService.readEventParticipants(eventId)
        val customCallback : CustomCallback<List<Participant>> =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }

    /**
     * create participant of event via participantService
     *
     * @param eventId
     * @param userId
     * @param onFinishedListener
     */
    fun createParticipant(eventId: Int, userId : Long, onFinishedListener: IOnFinishedListener<Event>){
        val call : Call<StatusResponseEntity<Event>> = participantService.create(eventId, userId)
        val customCallback : CustomCallback<Event> =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }

    /**
     * Remove participant from participant service controller
     *
     * @param eventId
     * @param userId
     * @param onFinishedListener
     */
    fun removeParticipant(eventId: Int, userId: Long,onFinishedListener: IOnFinishedListener<Event>){
        val call = participantService.removeParticipant(eventId,userId)
        val customCallback : CustomCallback<Event> =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }

    /**
     * retrieve performance response from participant service controller
     *
     * @param eventId
     * @param userId
     * @param onFinishedListener
     */
    fun getParticipant(eventId: Int, userId: Long,onFinishedListener: IOnFinishedListener<Participant>){
        val call = participantService.getPerformance(eventId,userId)
        val customCallback : CustomCallback<Participant> =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }
}