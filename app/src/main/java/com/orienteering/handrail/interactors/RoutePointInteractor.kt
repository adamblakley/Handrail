package com.orienteering.handrail.interactors

import com.orienteering.handrail.CustomCallback
import com.orienteering.handrail.IOnFinishedListener
import com.orienteering.handrail.models.RoutePoint
import com.orienteering.handrail.services.RoutePointService
import com.orienteering.handrail.services.ServiceFactory

/**
 * Model/Control request RoutePoint and handle response
 *
 */
class RoutePointInteractor {

    /**
     * RoutePoint service generated by service factory for http calls
     */
    var routePointService : RoutePointService

    /**
     * Initialise RoutePoint service
     */
    init {
        routePointService = ServiceFactory.makeService(RoutePointService::class.java)
    }

    /**
     * Function to call service method to upload routepoints
     *
     * @param participantId
     * @param routePoints
     * @param onFinishedListener
     */
    fun create(participantId : Int?, routePoints : List<RoutePoint>, onFinishedListener: IOnFinishedListener<List<RoutePoint>>){
        val call = routePointService.createMany(participantId,routePoints)
        val customCallback = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }
}