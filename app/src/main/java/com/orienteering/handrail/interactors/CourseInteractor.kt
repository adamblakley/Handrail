package com.orienteering.handrail.interactors

import com.orienteering.handrail.CustomCallback
import com.orienteering.handrail.IOnFinishedListener
import com.orienteering.handrail.models.Course
import com.orienteering.handrail.services.CourseService
import com.orienteering.handrail.services.ServiceFactory
import okhttp3.MultipartBody

/**
 * Model/Control request courseService and handle response
 *
 */
class CourseInteractor {

    /**
     * Participant service generated by service factory for http calls
     */
    var courseService: CourseService

    /**
     * Initialise course service
     */
    init {
        courseService = ServiceFactory.makeService(CourseService::class.java)
    }

    /**
     * create course via courseService
     *
     * @param id
     * @param course
     * @param files
     * @param onFinishedListener
     */
    fun uploadCourse(id : Long, course : Course, files : Array<MultipartBody.Part?>, onFinishedListener: IOnFinishedListener<Course>){
        val call = courseService.createWPhoto(id,course,files)
        val customCallback : CustomCallback<Course> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * get course via courseService
     *
     * @param id
     * @param onFinishedListener
     */
    fun retrieve(id : Int, onFinishedListener: IOnFinishedListener<Course>){
        val call = courseService.read(id)
        val customCallback : CustomCallback<Course> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }


    /**
     * get courses via courseService
     *
     * @param userId
     * @param onFinishedListener
     */
    fun retrieveAllByUser(userId: Long, onFinishedListener: IOnFinishedListener<List<Course>>){
        val call = courseService.readAllByUser(userId)
        val customCallback : CustomCallback<List<Course>> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * delet course via courseService
     *
     * @param id
     * @param onFinishedListener
     */
    fun deleteCourse(id : Int, onFinishedListener: IOnFinishedListener<Boolean>){
        val call = courseService.deleteCourse(id)
        val customCallback : CustomCallback<Boolean> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

}