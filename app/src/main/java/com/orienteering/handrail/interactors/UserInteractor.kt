package com.orienteering.handrail.interactors

import com.orienteering.handrail.httprequests.CustomCallback
import com.orienteering.handrail.httprequests.IOnFinishedListener
import com.orienteering.handrail.models.PasswordUpdateRequest
import com.orienteering.handrail.models.User
import com.orienteering.handrail.services.ServiceFactory
import com.orienteering.handrail.services.UserService
import okhttp3.MultipartBody

/**
 * Model/Control request User and handle response
 *
 */
class UserInteractor {
    /**
     * User service generated by service factory for http calls
     */
    var userService : UserService

    /**
     * Initialise userservice via service factory
     */
    init {
        userService = ServiceFactory.makeService(UserService::class.java)
    }

    /**
     * Get User by ID
     *
     * @param userId
     * @param onFinishedListener
     */
    fun read(userId: Long,onFinishedListener: IOnFinishedListener<User>){
        val call = userService.read(userId)
        val customCallback =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }


    /**
     * Function to call service method to update user
     *
     * @param userId
     * @param user
     * @param onFinishedListener
     */
    fun update(userId: Long, user : User, onFinishedListener: IOnFinishedListener<User>){
        val call = userService.update(userId,user)
        val customCallback =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }


    /**
     * Function to call service method to update user
     *
     * @param userId
     * @param user
     * @param file
     * @param onFinishedListener
     */
    fun update(userId: Long, user : User, file : MultipartBody.Part?, onFinishedListener: IOnFinishedListener<User>){
        val call = userService.update(userId,user,file)
        val customCallback =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }

    /**
     * Function to callservice method to update user password
     *
     * @param userId
     * @param passwordUpdateRequest
     * @param onFinishedListener
     */
    fun updatePassword(userId: Long, passwordUpdateRequest: PasswordUpdateRequest, onFinishedListener: IOnFinishedListener<Boolean>){
        val call = userService.updatePassword(userId,passwordUpdateRequest)
        val customCallback = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

}