package com.orienteering.handrail.interactors

import android.util.Log
import com.orienteering.handrail.CustomCallback
import com.orienteering.handrail.IOnFinishedListener
import com.orienteering.handrail.models.Event;
import com.orienteering.handrail.httprequests.StatusResponseEntity;
import com.orienteering.handrail.services.EventService;
import com.orienteering.handrail.services.ServiceFactory;
import okhttp3.MultipartBody
import retrofit2.Call;

/**
 * Model/Control request eventService and handle response
 *
 */
class EventInteractor {

    /**
     * Event service generated by service factory for http calls
     */
    val eventService: EventService = ServiceFactory.makeService(EventService::class.java)

    /**
     * Get all events via eventService
     *
     * @param onFinishedListener
     */
    fun getAllEvents(onFinishedListener: IOnFinishedListener<List<Event>>) {
        val call: Call<StatusResponseEntity<List<Event>>> = eventService.readAll()
        val customCallback : CustomCallback<List<Event>> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * create event via eventService
     * @param userId
     * @param event
     * @param file
     * @param onFinishedListener
     */
    fun createEvent(userId : Long, event : Event, file : MultipartBody.Part , onFinishedListener: IOnFinishedListener<Event>) {
        val call = eventService.create(userId,event,file)
        val customCallback : CustomCallback<Event> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * retrieve event by id via eventService
     *
     * @param id
     * @param onFinishedListener
     */
    fun retreiveByID(id : Int, onFinishedListener: IOnFinishedListener<Event>){
        val call = eventService.read(id)
        val customCallback : CustomCallback<Event> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * retreive events by user history via eventService
     *
     * @param id
     * @param onFinishedListener
     */
    fun retreiveByUserHistory(id : Long, onFinishedListener: IOnFinishedListener<List<Event>>){
        val call = eventService.readAllByUserHistory(id)
        val customCallback : CustomCallback<List<Event>> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }

    /**
     * update event status via eventService
     *
     * @param id
     * @param onFinishedListener
     */
    fun updateStatus(id : Int, onFinishedListener: IOnFinishedListener<Event>){
        val call = eventService.updateStatus(id)
        val customCallback : CustomCallback<Event> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }


    /**
     * delete event via event service
     *
     * @param id
     * @param onFinishedListener
     */
    fun deleteEvent(id : Int, onFinishedListener: IOnFinishedListener<Boolean>){
        val call = eventService.deleteEvent(id)
        val customCallback : CustomCallback<Boolean> = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }
}
