package com.orienteering.handrail.interactors

import com.orienteering.handrail.httprequests.CustomCallback
import com.orienteering.handrail.httprequests.IOnFinishedListener
import com.orienteering.handrail.httprequests.LoginRequest
import com.orienteering.handrail.httprequests.LoginResponse
import com.orienteering.handrail.services.LoginService
import com.orienteering.handrail.services.ServiceFactory

/**
 * Model/Control request loginService and handle response
 *
 */
class LoginInteractor {
    /**
     * Login service generated by service factory for http calls
     */
    var loginService : LoginService

    /**
     * Initialise login service
     */
    init{
        loginService = ServiceFactory.makeService(LoginService::class.java)
    }

    /**
     * login request, accepts loginRequest and responds successfully with callback to calling method
     * @param loginRequest
     */
    fun login(loginRequest: LoginRequest, onFinishedListener: IOnFinishedListener<LoginResponse>){
        val call = loginService.login(loginRequest)
        val customCallback =
            CustomCallback(
                onFinishedListener
            )
        call.enqueue(customCallback)
    }

    /**
     * Check user is currently authenticated
     *
     * @param callback
     */
    fun checkLogin(onFinishedListener: IOnFinishedListener<Boolean>){
        val call = loginService.checkLoggedIn()
        val customCallback = CustomCallback(onFinishedListener)
        call.enqueue(customCallback)
    }
}